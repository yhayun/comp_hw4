%{
#define YYDEBUG 1
#define YYERROR_VERBOSE 1	
#include "attributes.h"
#include "output.hpp"
#include <iostream>
#include <stdlib.h>
#include <stack>
#include <vector>
#include <string.h>
#include <stdio.h>
#include <algorithm>
using namespace std;	
using namespace output;

extern int yylex();
extern int yylineno;
extern char* yytext;

//DONT PUT ANY NON FUNCTION TYPES BELOW BYTE!!!!!	
	enum ttypes{
//EVERY TIME YOU TOUCH SOMETHING HERE U NEED TO CHANGE STUFF LIKE INT TO NAME
//JOHN IF U WANT TO CHANGE SOMETHING DON TDO IT WITH ASKING ME 
	 	TYPE_INT,
		TYPE_BOOL,
		TYPE_BYTE,
		TYPE_STRING,
		TYPE_FUNC_INT,
		TYPE_FUNC_BOOL,
		TYPE_FUNC_BYTE,
		TYPE_FUNC_VOID,
		TYPE_MAX
	};

//****************************************************************************************************
//                                   symblo table implementation:
//****************************************************************************************************
void int_to_name_push(int i, vector<const char*>& proto_names);
class info {
public:	
	string name;
	int offset;
	bool is_func;
	int type;
	vector<int> params;

//Methods:	
	info(string xname, int xoffset, int xtype){
		is_func = false;
		name = string(xname);
		offset = xoffset;
		type = xtype; 
		params = vector<int>();
	}

	/**
	 * compares this info with another
	 * @param  x [another info]
	 * @return   [bool]
	 */
	bool compare(info& x){
		if (name == x.name && is_func == x.is_func)
		return true;
	return false;
	}

	/**
	 * Compares between infos - returns true if equal.
	 * @param  a [left info]
	 * @param  b [right info]
	 * @return   [bool]
	 */
	bool info_compare(info& a, info& b){
		if (a.name == b.name && a.is_func == b.is_func)
			return true;
		return false;
	}
};








class glob_data {
    //symbol table main stack:
    vector<vector<info> > symb_stack;
    //track the offset of vars in the symbol stack global:
    stack<int> offset_stack;
public:
    //stores the current function declartions vars:
    //to keep track of the return type of function:
    int func_return;
    //Counts how many while loops so far:
    int is_while;
    //bad way(didn't find another) to handle a corner case: random ID string cause program -> to fail without proper error;
    bool big_scope_flag;


//Methods:
	glob_data(){
		big_scope_flag = false;
		is_while = 0;
		func_return = -1;
		symb_stack = vector<vector<info> >();
		symb_stack.push_back(vector<info>());
		offset_stack.push(0);
		info print_info("print",0,TYPE_FUNC_VOID);
		info printI_info("printi",0,TYPE_FUNC_VOID);
		print_info.is_func = 1;
		print_info.params.push_back(TYPE_STRING);
		printI_info.is_func = 1;
		printI_info.params.push_back(TYPE_INT);
		symb_stack.back().push_back(print_info);
		symb_stack.back().push_back(printI_info);
	}
	const char* int_to_name(int i){
      		if (i == TYPE_BYTE) return "BYTE";
        	if (i == TYPE_INT)  return "INT";
        	if (i == TYPE_BOOL) return "BOOL";
        	if (i == TYPE_STRING)  return "STRING";
                if (i == TYPE_FUNC_BYTE) return "BYTE";
                if (i == TYPE_FUNC_INT)  return "INT";
                if (i == TYPE_FUNC_BOOL) return "BOOL";
		if (i == TYPE_FUNC_VOID) return "VOID";
	}
	int type_to_ret_type(int i){
                if (i == TYPE_INT) return TYPE_FUNC_INT;
                if (i == TYPE_BOOL) return TYPE_FUNC_BOOL;
                if (i == TYPE_BYTE) return TYPE_FUNC_BYTE;
	}
	/**
	 * push a new scope to global symbol table.
	 */
	void push_table(){
		vector<info> new_stack = vector<info>();
		symb_stack.push_back(new_stack);
		offset_stack.push(offset_stack.top());
	}

	/**
	 * removes the current scope and prints its content.
	 */
	void pop_table(){
		//NOT COMPLETE:
		endScope();
		for (vector<info>::iterator it = symb_stack.back().begin(); it !=symb_stack.back().end(); ++it){
			if ((*it).is_func == 0)
				 printID((*it).name.c_str(), (*it).offset, int_to_name((*it).type));
			else{
				if ((*it).name == "print" || (*it).name == "printi") continue;
                                vector<const char*> proto_names = vector<const char*>();
                                for (vector<int>::iterator it1 = (*it).params.begin();it1 != (*it).params.end();++it1){
                                      int_to_name_push(*it1, proto_names);
				}
				cout<<(*it).name<<" "<<makeFunctionType(int_to_name((*it).type), proto_names)<<" "<<(*it).offset<<endl;
				
			}
		}
		symb_stack.pop_back();	

		
		offset_stack.pop();
	}

	/**
	 * Pushes info into current scope for normal vars
	 * @param x [info]
	 */
	void add_symbol( info& x ){
		symb_stack.back().push_back(x);
		offset_stack.top()++;
	}

	/**
	 * Pushes info into current scope for FUNCTION vars
	 * @param x [info]
	 */
	void add_symbol_func( info x){
		symb_stack.back().push_back(x);
	}

	/**
	 * finds info inside a vector and stores it in 'store_found' if found :: used by find_in_table.
	 * @param  v           [vector]
	 * @param  x           [info]
	 * @param  store_found [res info placement]
	 * @return             [bool]
	 */
	bool vector_contains (vector<info>& v, info& x, info& store_found){
		vector<info>::iterator it;
		for (it = v.begin(); it != v.end(); it++){
			if (x.compare(*it)){
				store_found = (*it);
				return true;
			}
		}
		return false;
	}

	/**
	 * looks for a symbol with given name in global symbol table.
	 * @param  name    [ifo's name]
	 * @param  value   [placement to store info]
	 * @param  is_func [boolean - search for function if true, else var]
	 * @return         [info.type or -1 if not found]
	 */
	int find_in_table (string name, info& value, bool is_func)
	{
	  vector<vector<info> >::reverse_iterator rit;
	  for( rit = symb_stack.rbegin(); rit != symb_stack.rend(); ++rit)
		{
			info temp(name, 0, 0);
			temp.is_func = is_func;
			if (vector_contains((*rit), temp, value)){
				return value.type;
			}
		}
	  return -1;
	}

	/**
	 * finds var with given name.
	 * @param  name  [info's name]
	 * @param  value [placement to store info]
	 * @return       [info.type or -1 if not found]
	 */
	int find_var (string name, info& value){
		//range of vars in the global enum.
		return find_in_table(name, value, false);
	}

	/**
	 *  finds function with given name.
	 * @param  name  [info's name]
	 * @param  value [placement to store info]
	 * @return       [info.type or -1 if not found]
	 */
	int find_func (string name, info& value){
		//range of functions in the global enum.
		return find_in_table(name, value, true);
	}

	/**
	 *  check if function with given name exists.
	 * @param  name  [info's name]
	 * @return       [info.type or -1 if not found]
	 */
	int has_func(string name){
		info value("dummy", 0, 0);
		//range of functions in the global enum.
		return find_in_table(name, value, true);
	}

	/**
	 * check if var with given name exists.
	 * @param  name  [info's name]
	 * @return       [info.type or -1 if not found]
	 */
	int has_var(string name){
		info value("dummy", 0, 0);
		//range of vars in the global enum.
		return find_in_table(name, value, false);
	}

	/**
	 * handles 'Statement' insertion to symbol table.
	 * @param x         [Statement's STYPE]
	 * @param new_scope [bool]
	 */
	void manange_insert( STYPE& x , bool new_scope){
		if (x.insert == false)
			return;	
		x.insert == false;

		info new_info(x.name, offset_stack.top(), x.type);

		if (new_scope){
			//single var in scope:
			push_table();
			add_symbol(new_info);
			pop_table();
			return;
		}
		//push into current table:
		add_symbol(new_info);
		return;
	}
	bool is_same_list(vector<int>& v1, vector<int>& v2){
             vector<int>::iterator it1 = (v1).begin();
             vector<int>::iterator it2 = v2.begin();
             for(;   it1 != v1.end() || it2 != v2.end(); ++it1, ++it2) {
             if (*it1 != *it2 && !(*it2 == TYPE_BYTE && *it1 == TYPE_INT))
            	 {
			return false;
             	 }
             }
             if (it1 != v1.end() || it2 != v2.end())
             {
		return false;
             }
	     return true;
	}
	void add_func_symbol_to_table(vector<pair<string,int> >& symb_vec){
                vector<pair<string,int> >::iterator it;
                int i = -1;
                for( it = symb_vec.begin(); it != symb_vec.end(); ++it){
                         info new_info = info((*it).first, i--,(*it).second);
                         add_symbol_func(new_info);
                }
	}

	/**
	 * Compare values with the operand in the relop string
	 * @param  val1  [left operand]
	 * @param  relop [comparsion string]
	 * @param  val2  [right operand]
	 * @return       [bool result]
	 */
	bool check_relop(int val1, string relop, int val2){
			if (relop == "==")
				return val1 == val2;
			else if (relop == "!=")
				return val1 != val2;
			else if (relop == "<")
				return val1 < val2;
			else if (relop == ">")
				return val1 > val2;	
			else if (relop == "<=")
				return val1 <= val2;
			else if (relop == ">=")
				return val1 >= val2;	
			else{
				cout << "ERROR  <>---- RELOP COMMAND NOT FOUND ---- <>  ERROR";	
				exit(1);	
			}
	}

	/**
	 * cacluates the binop result if the operands are constant numbers.
	 * @param  val1  [left operand]
	 * @param  binop [operand string]
	 * @param  val2  [right operand]
	 * @return       [operation value]
	 */
	int calc_binop(int val1, string binop, int val2){ 
			if (binop == "+")
				return val1 + val2;
			else if (binop == "-")
				return val1 - val2;
			else if (binop == "*")
				return val1 * val2;
			else if (binop == "/")
				return val1 / val2;		
			else{
				cout << "ERROR  <>---- BINOP NOT FOUND ---- <>  ERROR";	
				exit(1);	
			}
	}	

	int convert_type_func_to_var( int func_type){
		//This is a quick fix. that relys on the distance between
		//functions types and var types inside the enum.
		//might needed to be repaired later.
		return func_type -4;
	}

	void check_for_main(){
		info func_info("dummy", -1, -1);
		if (find_func("main",func_info) < 0 || func_info.type != TYPE_FUNC_VOID || func_info.params.size() ){
			errorMainMissing(); 
			exit(1);
		}
	}
	
};


//****************************************************************************************************
//                                   Other functions:
//****************************************************************************************************
	int yyerror(char const * message);
	void int_to_name_push(int i, vector<const char*>& proto_names);

//****************************************************************************************************
//                                   Globals:
//****************************************************************************************************
	glob_data st;





%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token IF
%token NUM
%token WHILE
%token SWITCH
%token CASE
%token BREAK
%token COLON
%token SC
%token COMMA
%token LPAREN
%token RPAREN
%token LBRACE
%token RBRACE
%token ASSIGN
%token ID
%token STRING
%token whitespace
%token comment
%right then ELSE
	
%left AND
%left OR
%left RELOP
%left BINOP
%left NOT	

%%


Program 	: Funcs {
					//st.check_for_main();
                    if (st.big_scope_flag) st.pop_table();
				}
			;

Funcs 		:	FuncDecl Funcs {
	                         st.check_for_main();
                             st.big_scope_flag = true;
							}
                        | /* epsilon*/ {
                                        //check if file is empty - error is missing main;
                                        if(strlen(yytext) == 0 ){
                                                st.check_for_main();
                                        }
                                }
                        ;

FuncDecl     : FuncDecl1 LBRACE Statements RBRACE{	
			     if (!$3.have_sure_exit && st.func_return != TYPE_FUNC_VOID){
			     	errorNotAllPaths(yylineno, $$.name.c_str()); 
			     	exit(1);
			     }			
                st.pop_table();
			 	st.func_return = -1;
               }
               ;

FuncDecl1		: RetType ID LPAREN Formals RPAREN {  
                    // first we check if the func we just declared is already declared ?
                    if (st.has_func($2.name) >= 0){
                    	errorDef(yylineno, $2.name.c_str()); 
                    	exit(1);
                    }
                    info new_info($2.name, 0, $1.type);
                    new_info.is_func = 1;
                    for (vector<pair<string,int> >::iterator it = $4.formal_list.begin(); it != $4.formal_list.end(); ++it){
                        new_info.params.push_back((*it).second);
                    }
                    st.add_symbol_func(new_info);
                    st.push_table();
                    st.add_func_symbol_to_table($4.formal_list);			   				
				}
			;


RetType 		: Type {
					int t = -1;
					if ($1.type == TYPE_INT) t = TYPE_FUNC_INT;
					if ($1.type == TYPE_BOOL) t = TYPE_FUNC_BOOL;
					if ($1.type == TYPE_BYTE) t = TYPE_FUNC_BYTE;
					st.func_return = t;
					$$.type = t;
			     }
			| VOID {st.func_return = (TYPE_FUNC_VOID) ; $$.type = TYPE_FUNC_VOID;}
			;

Formals		 	: /*epsilon*/ {$$.formal_list = vector<pair<string,int> >();}
			| FormalsList {$$.formal_list = $1.formal_list;}
			;

FormalsList 		: FormatDecl {$$.formal_list.insert($$.formal_list.begin()  ,make_pair($1.name ,$1.type));}
			| FormatDecl COMMA FormalsList {$$.formal_list = $3.formal_list; $$.formal_list.insert($$.formal_list.begin(), make_pair($1.name,$1.type));}
			;

FormatDecl  : Type ID {$$.type = $1.type; $$.name = $2.name;}
			;

Statements		: Statement {
					$$.have_sure_exit = $1.have_sure_exit;
					st.manange_insert( $1 , false);
					}
			| Statements Statement {
					$$.have_sure_exit = ($1.have_sure_exit || $2.have_sure_exit) ? true : false; // doing or between of them
					st.manange_insert( $2 , false);
					}
			;

Statement	 	: LBRACE PushMark Statements RBRACE {
								  $$.have_sure_exit = $3.have_sure_exit;
								  $$.insert = false;
								  st.pop_table();
							    }
			| Type ID SC {
					if (st.has_func($2.name) >= 0|| st.has_var($2.name) >= 0) {
						errorDef(yylineno, $2.name.c_str()); 
						exit(1);
					}
				     	$$.type = $1.type;
					$$.name = $2.name;
					$$.insert = true;
					$$.have_sure_exit = false;
					}
			| Type ID ASSIGN Exp SC {
					if (st.has_func($2.name) >= 0|| st.has_var($2.name) >= 0) {
						errorDef(yylineno, $2.name.c_str()); 
						exit(1);
					}
					if ($1.type != $4.type && !($4.type == TYPE_BYTE && $1.type == TYPE_INT)) { 
						errorMismatch(yylineno); 
						exit(1);
					}
					if ($1.type == TYPE_BYTE && $4.value > 255){
						errorByteTooLarge(yylineno, $4.name.c_str()); 
						exit(1);
					}
					if ( $1.type == TYPE_BYTE && $4.type == TYPE_INT){
						errorMismatch(yylineno); 
						exit(1);
					}
                    $$.type = $1.type;
                    $$.name = $2.name;
                    $$.insert = true;
					$$.have_sure_exit = false;
				}
			| ID ASSIGN Exp SC {
						$$.insert = false;
						int res = -1;
						if ((res = st.has_var($1.name)) < 0){ 
							errorUndef(yylineno, $1.name.c_str()); 
							exit(1);
						}
						if (res != $3.type && !(res == TYPE_INT && $3.type == TYPE_BYTE)){
							errorMismatch(yylineno); 
							exit(1);
						}
						if (res == TYPE_BYTE && $3.value > 255){
							errorByteTooLarge(yylineno, $3.name.c_str()); 
							exit(1);
						}
						if ( $1.type == TYPE_BYTE && $4.type == TYPE_INT){
							errorMismatch(yylineno); 
							exit(1);
						}
						$$.have_sure_exit = false;
					}
			| Call SC { 
					$$.insert = false;
					$$.have_sure_exit = false;
				  }
			| RETURN SC {
					$$.have_sure_exit = true;
					$$.insert = false;
					if (st.func_return != TYPE_FUNC_VOID){
						errorMismatch(yylineno);
						exit(1);
					} 
				}
			| RETURN Exp SC {
					$$.have_sure_exit = true;
					$$.insert = false;
					if (st.func_return != st.type_to_ret_type($2.type) && !(st.func_return == TYPE_FUNC_INT && $2.type == TYPE_BYTE)) {
						errorMismatch(yylineno);
						exit(1);
					}
					if (st.func_return == TYPE_FUNC_BYTE && $2.value > 255){
						errorByteTooLarge(yylineno, $2.name.c_str()); 
						exit(1);
					};
				}
			| IFPART1 Statement ELSE Statement {
							$$.have_sure_exit = ($2.have_sure_exit && $4.have_sure_exit) ? true : false;
							$$.insert = false;
							st.manange_insert( $2 , true);
							st.manange_insert( $4 , true);
						}
			| IFPART1 Statement {	
								$$.have_sure_exit = false;
								$$.insert = false;
								st.manange_insert($2, true);
					 		 }      %prec then

			| WHILEPART1 Statement {
								$$.insert = false;
								st.manange_insert( $2 , true);
								st.is_while--;
								$$.have_sure_exit = false;
							}
			| BREAK SC {
						$$.insert = false;	
						if (!st.is_while) {
							errorUnexpectedBreak(yylineno); 
							exit(1);
						}
					}
			| SWITCH1part LBRACE CaseList RBRACE SC{
										$$.insert = false;
										$$.have_sure_exit = false; 
									}

			;
IFPART1		: IF LPAREN Exp RPAREN{
										if ($3.type != TYPE_BOOL){
											errorMismatch(yylineno);
											exit(1);
										}
										if ($3.is_true == F_VAL){
											errorDeadCode(yylineno); 
											exit(1);
										}	

								}
			;
WHILEPART1	:	WHILE Mark2 LPAREN Exp RPAREN{
												if ($4.type != TYPE_BOOL){
													errorMismatch(yylineno);
													exit(1);
												}
												if ($4.is_true == F_VAL){
													errorDeadCode(yylineno);
													exit(1);
												}

											}
			;
SWITCH1part	: SWITCH LPAREN Exp RPAREN {
										if($3.type != TYPE_BYTE && $3.type != TYPE_INT){
											errorMismatch(yylineno);
											exit(1);
										}	

					}
			;

Mark2		:/* epsilon*/ { st.is_while++;}
			;

CaseList	: CaseStat CaseList {}
			| CaseStat {}
			;

CaseStat		: CASE NUM COLON Statement BREAK SC {
                                       	 		  st.manange_insert( $4 , true); 
							}
			| CASE NUM B COLON Statement BREAK SC {
                                                          st.manange_insert( $5 , true);
							}
			;

Call 			: ID LPAREN Mark1 ExpList RPAREN {
						//first we check that the function is defined
								info func_info("dummy", -1, -1);
								if (st.find_func($1.name,func_info) < 0){
									errorUndefFunc(yylineno, $1.name.c_str()); 
									exit(1);
								}

								vector<const char*> proto_names = vector<const char*>();
								for (vector<int>::iterator it1 = (func_info.params).begin();it1 != func_info.params.end();++it1){
									int_to_name_push(*it1, proto_names);
								}
								if (!st.is_same_list(func_info.params, $4.exp_list)){
									errorPrototypeMismatch(yylineno, $1.name.c_str(), proto_names);
									exit(1);
								}
								$$.type = st.convert_type_func_to_var( func_info.type);
							}			
			| ID LPAREN RPAREN {
						//first we check that the function is defined
								info func_info("dummy", -1, -1);
								if (st.find_func($1.name,func_info) < 0){
									errorUndefFunc(yylineno, $1.name.c_str()); 
									exit(1);
								}
                                                                vector<const char*> proto_names = vector<const char*>();
                                                                for (vector<int>::iterator it1 = (func_info.params).begin();it1 != func_info.params.end();++it1){
                                                                        int_to_name_push(*it1, proto_names);
                                                                }

								if (func_info.params.size()) { errorPrototypeMismatch(yylineno, $1.name.c_str() , proto_names);exit(1);}
								$$.type = st.convert_type_func_to_var( func_info.type);
			}
			;
Mark1		: /*epsilon*/ {}

ExpList		: Exp {
				$$.exp_list.insert($$.exp_list.begin() ,$1.type);
			}
			| Exp COMMA ExpList {
						$$.exp_list = $3.exp_list;
						$$.exp_list.insert($$.exp_list.begin() , $1.type);
					    }
			;

Type 		: INT {$$.type = TYPE_INT;}
			| BYTE {$$.type = TYPE_BYTE;}
			| BOOL {$$.type = TYPE_BOOL;}
			;

Exp	 		: LPAREN Exp RPAREN {
							$$.is_true = $2.is_true;
							$$.type = $2.type;
							$$.value = $2.value;
							}
			| Exp BINOP Exp {
                         if ($1.is_true != UNDEFINED && $3.is_true != UNDEFINED){
                         	$$.value = st.calc_binop($1.value,  $2.name, $3.value);
                           	$$.is_true = ($$.value != 0) ? T_VAL : F_VAL ;
                         }else{
                            $$.is_true = UNDEFINED;
                         }
                         if (!($1.type == TYPE_INT || $1.type == TYPE_BYTE) || !($3.type == TYPE_INT || $3.type == TYPE_BYTE)){
                         	errorMismatch(yylineno);
                         	exit(1);
                         }
						
						$$.type =( $1.type == TYPE_INT || $3.type == TYPE_INT) ? TYPE_INT : TYPE_BYTE;	
					}
			| ID { 
					int res = -1;
					info new_info("",-1,-1);
					res = st.find_func($1.name, new_info);
					$$.is_true = UNDEFINED;
					if (res >= 0) $$.type = res;
					else if ((res = st.find_var($1.name, new_info)) >= 0) $$.type = res;
					else {
						errorUndef(yylineno, $1.name.c_str()); 
						exit(1);
					}	
			     }
			| Call {
				$$.type = $1.type;
				$$.is_true = UNDEFINED;
				}
			| NUM {
				$$.type = TYPE_INT;
				$$.name = $1.name; 
				$$.value = $1.value;
				$$.is_true = ($1.value != 0) ? T_VAL : F_VAL ;
				 }
			| NUM B {
				if ($1.value > 255 || $1.value < 0){
					errorByteTooLarge(yylineno, $1.name.c_str());
					exit(1);
				} 
				$$.type = TYPE_BYTE;
				$$.name = $1.name;
				$$.value = $1.value;
				$$.is_true = ($1.value != 0) ? T_VAL : F_VAL ;
			}
			| STRING {$$.type = TYPE_STRING;}
			| TRUE {
					$$.type = TYPE_BOOL;
					$$.is_true = T_VAL;
				}
			| FALSE {
					$$.type = TYPE_BOOL;
					$$.is_true = F_VAL;
				}
			| NOT Exp {
                                        $$.type = TYPE_BOOL;
                                        if ($2.type != TYPE_BOOL) {
                                        	errorMismatch(yylineno); 
                                        	exit(1);
                                        }
                                        if ($2.is_true != UNDEFINED){
                                        	$$.is_true =($2.is_true == F_VAL) ? T_VAL : F_VAL ;
                                        }else{
                                        	$$.is_true = UNDEFINED;
                                        }     
                                  }  
			| Exp AND Exp {
                                        $$.type = TYPE_BOOL;
                                        if ($1.type != TYPE_BOOL ||  $3.type != TYPE_BOOL) {
                                        	errorMismatch(yylineno); 
                                        	exit(1);
                                        }
                                         if ($1.is_true != UNDEFINED && $3.is_true != UNDEFINED){
                                        	$$.is_true =($1.is_true == T_VAL && $3.is_true == T_VAL) ? T_VAL : F_VAL ;
                                        }else{
                                        	$$.is_true = UNDEFINED;
                                        }
				     }
			| Exp OR Exp {
                                        $$.type = TYPE_BOOL;
                                        if ($1.type != TYPE_BOOL ||  $3.type != TYPE_BOOL) {
                                        	errorMismatch(yylineno); 
                                        	exit(1);
                                        }
                                        if ($1.is_true != UNDEFINED && $3.is_true != UNDEFINED){
                                        	$$.is_true =  ($1.is_true == T_VAL || $3.is_true == T_VAL) ? T_VAL : F_VAL ;
                                        }else{
                                        	$$.is_true = UNDEFINED;
                                        }
                                     }  
			| Exp RELOP Exp {
						$$.type = TYPE_BOOL;
						if (!($1.type == TYPE_INT || $1.type == TYPE_BYTE) || !($3.type == TYPE_INT || $3.type == TYPE_BYTE)){
							errorMismatch(yylineno); 
							exit(1);
						}
                        if ($1.is_true != UNDEFINED && $3.is_true != UNDEFINED){
                        	$$.is_true = st.check_relop($1.value,  $2.name, $3.value ) ? T_VAL : F_VAL;
                        }else{
                        	$$.is_true = UNDEFINED;
                        }
					}
			;	

			;
PushMark    :/*epsilon*/
                {
					st.push_table();
                }
             ;
%%

int main()
{
	//yydebug = 1;
	yyparse();
}

int yyerror(char const * message)
{
	errorSyn(yylineno);
	exit(1);
}

void int_to_name_push(int i, vector<const char*>& proto_names){
	if (i == TYPE_BYTE) proto_names.push_back("BYTE");
	if (i == TYPE_INT)  proto_names.push_back("INT");
	if (i == TYPE_BOOL) proto_names.push_back("BOOL");
	if (i == TYPE_STRING)  proto_names.push_back("STRING");
 
}
